{"name":"Drink Coffee","body":"# Drink.coffee\r\n\r\nDrink Coffee, or JavaScript. Daily.\r\n\r\n# Overview\r\n\r\n**Drink** is a simple, and easy to use Terminal Helper. It helps you keep sessions alive, process input, send output, and more in a quirky or direct sytnax.\r\n\r\nNo. Seriously. It has humour or not for those serious types. Both Javascript and Coffeescript are supported, examples shown below are in coffee-script.\r\n\r\n# Installation\r\n\r\nThe easiest way to install Drink is to utilize **npm**\r\n\r\n`npm install drink`\r\n\r\nThen inside your script, require drink.\r\n\r\n`drink = require 'drink'`\r\n\r\n# Use Cases\r\n\r\nWhat can drink be used for? Simple. A lot. Everything from CLI to IRC Clients to Zebra Tracking Utilities. Seriously.\r\nDrink allows you to simply keep alive a terminal session. Think about that. You can make a Twitter Client, Reddit Poster, quite literally anything.\r\n\r\nNow you see it's power.\r\n\r\n# Usage\r\n\r\nUtilizing Drink is very simple. For a basic keep alive all you need is this:\r\n\r\n``` coffee\r\nCoffee = drink process\r\ndo Coffee.stir\r\n```\r\n\r\nThis will initialize drink with the current terminal process allowing it to keep your session alive and accept input information.\r\nMore often than naught you might want it to process for a certain amount of times or at a specific rate, Drink supports this:\r\n\r\n``` coffee\r\n# Default Option Settings\r\n# rate - the amount of time in-between pours (happens while stirring), in milliseconds.\r\n# for - the amount of pours you want drink to process.\r\n# debug - numerical / boolean, 2 is to show pour amounts.\r\nCoffee = drink process, rate: 1000, for: 0, debug: false\r\n\r\n# Begin Stirring\r\ndo Coffee.stir\r\n```\r\n\r\n## Stirring\r\n\r\nIn Drink, keeping the Session alive in terminal is considered `stirring`, just as with the basic usage.\r\n\r\n``` coffee\r\n# Setup Drink\r\nCoffee = drink process, { rate: 1000, for: 0, debug: false }\r\n\r\n# Start Stirring as Drink Pours\r\ndo Coffee.stir\r\n```\r\n\r\nFor those who think they may not remember this, or are confused as to what it does, you can also use it's aliased function `start`:\r\n\r\n``` coffee\r\nCoffee = drink process\r\ndo Coffee.start\r\n```\r\n\r\n## Spilling\r\n\r\nTo stop the session from stirring you simply `spill` the session or cup out.\r\n\r\n``` coffee\r\nCoffee = drink process\r\n\r\n# Initialize the session\r\ndo Coffee.stir\r\n\r\n# Kill or Exit the session.\r\ndo Coffee.spill\r\n```\r\n\r\nOnce again, this also has an alias called `exit`\r\n\r\n# Terminal Output Methods\r\n\r\n## Sipping\r\n\r\nAre you one of those who don't like fully gulping down a cup? Well just sip on it. *Spec Note: This may change*\r\n\r\nSipping allows you to push to console or terminal without appending newlines.\r\n\r\n``` coffee\r\nCoffee = drink process\r\ndo Coffee.stir\r\n\r\nCoffee.sip \"Hello \"\r\nCoffee.sip \"World!\"\r\n```\r\n\r\nAliased Method: `print`\r\n\r\n## Gulping\r\n\r\nMaybe you do prefer to gulp down some information; We certainly can help provide that functionality. *Spec Note: This may change*\r\n\r\nSame as sip, with a newline appended.\r\n\r\n``` coffee\r\nCoffee = drink process\r\ndo Coffee.stir\r\n\r\nCoffee.gulp \"Hello\"\r\nCoffee.gulp \"World!\"\r\n```\r\n\r\nAliased Method: `printnl`\r\n\r\n# Terminal Input Methods\r\n\r\n## Single Character Input\r\n\r\nUseful for those Y/N Questions a lot of people seem to bring up in conversation. For those quick little bursts of information we simply use an `onTap` method with a nice callback.\r\n\r\n``` coffee\r\nCoffee = drink process\r\ndo Coffee.stir\r\n\r\nCoffee.onTap';', ->\r\n  # We want to exit now. They used a semi-colon, my weakness!\r\n  # We also bind this, so you can easily manipulate the parent.\r\n  do this.spill\r\n```\r\n\r\nAliased Method: `onKey`\r\n\r\nThere is a little more functionality, such as meta-keys:\r\n\r\n```\r\nCoffee.onTap({ name: 'd', ctrl: true }, ->\r\n  this.gulp \"Hello World!\"\r\n)\r\n```\r\n\r\nSupports `ctrl`, `meta`, `shift`\r\n\r\n## Data Input\r\n\r\nFor those who need a mouthfull of information we simply use an `onFill` method with a nice callback.\r\n\r\n``` coffee\r\nCoffee = drink process\r\ndo Coffee.stir\r\n\r\nCoffee.onFill'exit;', ->\r\n  # We want to exit now. They typed exit!\r\n  # We also bind this, so you can easily manipulate the parent.\r\n  do this.spill\r\n```\r\n\r\nAliased Method: `onData`\r\n\r\nLet's say you just want to get information, in general?\r\nThe first argument passed is a binary output from the process, do with this as you wish.\r\nThe second argument passed is a string output that has been **pre-trimmed* by drink. Enjoy~\r\n\r\n```\r\nCoffee.onFillnull, (chunk, data) ->\r\n  this.gulp \"You said: \" + data\r\n```","tagline":"Drink Coffee. Everyday. Terminal Application Helper, Keep alive sessions and more!","google":"UA-30936026-1","note":"Don't delete this file! It's used internally to help with page regeneration."}